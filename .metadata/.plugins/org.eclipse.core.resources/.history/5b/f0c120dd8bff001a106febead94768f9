/*
 * socket_servidor.c
 *
 *  Created on: 7 sep. 2020
 *      Author: utnso
 */

#include "socket_servidor.h"

int iniciar_servidor(t_config* config, t_log* logger){
	struct sockaddr_in dirServidor;

	int socket_servidor;

	int puerto_escucha = config_get_int_value(config,"PUERTO_ESCUCHA");
	char *ip = config_get_string_value(config,"IP");

    dirServidor.sin_family = AF_INET;
    dirServidor.sin_addr.s_addr = inet_addr(ip);
    dirServidor.sin_port = htons(puerto_escucha);
    memset(&(dirServidor.sin_zero), '\0', 8);

    int yes = 1;

    if ((socket_servidor = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
    	log_error(logger,"SERVIDOR: No se pudo crear socket.");

    	free(socket_servidor);
    	free(dirServidor);

    	exit(EXIT_FAILURE);
    }

    if (setsockopt(socket_servidor,SOL_SOCKET,SO_REUSEADDR,&yes,sizeof(int)) == -1){
    	log_error(logger, "SERVIDOR: Error setcokopt.")

    	free(socket_servidor);
    	free(dirServidor);

    	exit(EXIT_FAILURE);

    }

    if (bind(socket_servidor, (void *)&dirServidor, sizeof(dirServidor)) != 0){
    	log_error(logger, "SERVIDOR: Error bind.")

    	free(socket_servidor);
    	free(dirServidor);

    	exit(EXIT_FAILURE);

    }

    if (listen(socket_servidor, SOMAXCONN) == -1) {
    	log_error(logger, "SERVIDOR: Error listen.")

    	free(socket_servidor);
    	free(dirServidor);

    	exit(EXIT_FAILURE);

    }


    return socket_servidor;
}

int recibir_conexion(int socket_servidor){

	struct sockaddr_in dirCliente;

	int tam_direccion = sizeof(struct sockaddr_in);

	int socket_cliente = accept(socket_servidor, (void*)&dirCliente, &tam_direccion);

	for(;;);

	return socket_cliente;

}
